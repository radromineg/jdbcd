class MinHeap:
    def __init__(self):
        self.heap = []
    
    def parent(self, index):
        return (index - 1) // 2
    
    def left_child(self, index):
        return 2 * index + 1
    
    def right_child(self, index):
        return 2 * index + 2
    
    def insert(self, key):
        self.heap.append(key)
        self._heapify_up(len(self.heap) - 1)
    
    def _heapify_up(self, index):
        while index > 0 and self.heap[self.parent(index)] > self.heap[index]:
            self.heap[self.parent(index)], self.heap[index] = self.heap[index], self.heap[self.parent(index)]
            index = self.parent(index)
    
    def extract_min(self):
        if not self.heap:
            raise IndexError("extract_min from empty heap")
        min_val = self.heap[0]
        last = self.heap.pop()
        if self.heap:
            self.heap[0] = last
            self._heapify_down(0)
        return min_val
    
    def _heapify_down(self, index):
        smallest = index
        left = self.left_child(index)
        right = self.right_child(index)
        if left < len(self.heap) and self.heap[left] < self.heap[smallest]:
            smallest = left
        if right < len(self.heap) and self.heap[right] < self.heap[smallest]:
            smallest = right
        if smallest != index:
            self.heap[smallest], self.heap[index] = self.heap[index], self.heap[smallest]
            self._heapify_down(smallest)
    
    def get_min(self):
        if not self.heap:
            return None
        return self.heap[0]

# 测试示例
if __name__ == "__main__":
    min_heap = MinHeap()
    for key in [5, 3, 8, 1, 2]:
        min_heap.insert(key)
    print("最小值:", min_heap.get_min())        # 输出：最小值: 1
    print("弹出最小值:", min_heap.extract_min())  # 输出：弹出最小值: 1
    print("新的最小值:", min_heap.get_min())      # 输出：新的最小值: 2

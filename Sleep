package main

import (
	"fmt"
	"math/rand"
	"sync"
	"time"
)

func producer(ch chan int, wg *sync.WaitGroup) {
	defer wg.Done()
	for i := 0; i < 5; i++ {
		num := rand.Intn(100)
		fmt.Println("Produced:", num)
		ch <- num
		time.Sleep(time.Millisecond * 500)
	}
	close(ch)
}

func consumer(ch chan int, wg *sync.WaitGroup) {
	defer wg.Done()
	for num := range ch {
		fmt.Println("Consumed:", num)
		time.Sleep(time.Millisecond * 700)
	}
}

func main() {
	rand.Seed(time.Now().UnixNano())
	ch := make(chan int, 5)
	var wg sync.WaitGroup

	wg.Add(2)
	go producer(ch, &wg)
	go consumer(ch, &wg)
	wg.Wait()
}
